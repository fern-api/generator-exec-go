// This file was auto-generated by Fern from our API Definition.

package generatorexec

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

type ErrorExitStatusUpdate struct {
	Message string `json:"message"`
}

type ExitStatusUpdate struct {
	Type       string
	Successful *SuccessfulStatusUpdate
	Error      *ErrorExitStatusUpdate
}

func NewExitStatusUpdateFromSuccessful(value *SuccessfulStatusUpdate) *ExitStatusUpdate {
	return &ExitStatusUpdate{Type: "successful", Successful: value}
}

func NewExitStatusUpdateFromError(value *ErrorExitStatusUpdate) *ExitStatusUpdate {
	return &ExitStatusUpdate{Type: "error", Error: value}
}

func (e *ExitStatusUpdate) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "successful":
		value := new(SuccessfulStatusUpdate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Successful = value
	case "error":
		value := new(ErrorExitStatusUpdate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Error = value
	}
	return nil
}

func (e ExitStatusUpdate) MarshalJSON() ([]byte, error) {
	switch e.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "successful":
		var marshaler = struct {
			Type string `json:"_type"`
			*SuccessfulStatusUpdate
		}{
			Type:                   e.Type,
			SuccessfulStatusUpdate: e.Successful,
		}
		return json.Marshal(marshaler)
	case "error":
		var marshaler = struct {
			Type string `json:"_type"`
			*ErrorExitStatusUpdate
		}{
			Type:                  e.Type,
			ErrorExitStatusUpdate: e.Error,
		}
		return json.Marshal(marshaler)
	}
}

type ExitStatusUpdateVisitor interface {
	VisitSuccessful(*SuccessfulStatusUpdate) error
	VisitError(*ErrorExitStatusUpdate) error
}

func (e *ExitStatusUpdate) Accept(visitor ExitStatusUpdateVisitor) error {
	switch e.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", e.Type, e)
	case "successful":
		return visitor.VisitSuccessful(e.Successful)
	case "error":
		return visitor.VisitError(e.Error)
	}
}

type GeneratorUpdate struct {
	Type             string
	Init             *InitUpdate
	InitV2           *InitUpdateV2
	Log              *LogUpdate
	Publishing       *PackageCoordinate
	Published        *PackageCoordinate
	ExitStatusUpdate *ExitStatusUpdate
}

func NewGeneratorUpdateFromInit(value *InitUpdate) *GeneratorUpdate {
	return &GeneratorUpdate{Type: "init", Init: value}
}

func NewGeneratorUpdateFromInitV2(value *InitUpdateV2) *GeneratorUpdate {
	return &GeneratorUpdate{Type: "initV2", InitV2: value}
}

func NewGeneratorUpdateFromLog(value *LogUpdate) *GeneratorUpdate {
	return &GeneratorUpdate{Type: "log", Log: value}
}

func NewGeneratorUpdateFromPublishing(value *PackageCoordinate) *GeneratorUpdate {
	return &GeneratorUpdate{Type: "publishing", Publishing: value}
}

func NewGeneratorUpdateFromPublished(value *PackageCoordinate) *GeneratorUpdate {
	return &GeneratorUpdate{Type: "published", Published: value}
}

func NewGeneratorUpdateFromExitStatusUpdate(value *ExitStatusUpdate) *GeneratorUpdate {
	return &GeneratorUpdate{Type: "exitStatusUpdate", ExitStatusUpdate: value}
}

func (g *GeneratorUpdate) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	g.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "init":
		value := new(InitUpdate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Init = value
	case "initV2":
		value := new(InitUpdateV2)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.InitV2 = value
	case "log":
		value := new(LogUpdate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Log = value
	case "publishing":
		var valueUnmarshaler struct {
			Publishing *PackageCoordinate `json:"publishing,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		g.Publishing = valueUnmarshaler.Publishing
	case "published":
		var valueUnmarshaler struct {
			Published *PackageCoordinate `json:"published,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		g.Published = valueUnmarshaler.Published
	case "exitStatusUpdate":
		var valueUnmarshaler struct {
			ExitStatusUpdate *ExitStatusUpdate `json:"exitStatusUpdate,omitempty"`
		}
		if err := json.Unmarshal(data, &valueUnmarshaler); err != nil {
			return err
		}
		g.ExitStatusUpdate = valueUnmarshaler.ExitStatusUpdate
	}
	return nil
}

func (g GeneratorUpdate) MarshalJSON() ([]byte, error) {
	switch g.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "init":
		var marshaler = struct {
			Type string `json:"_type"`
			*InitUpdate
		}{
			Type:       g.Type,
			InitUpdate: g.Init,
		}
		return json.Marshal(marshaler)
	case "initV2":
		var marshaler = struct {
			Type string `json:"_type"`
			*InitUpdateV2
		}{
			Type:         g.Type,
			InitUpdateV2: g.InitV2,
		}
		return json.Marshal(marshaler)
	case "log":
		var marshaler = struct {
			Type string `json:"_type"`
			*LogUpdate
		}{
			Type:      g.Type,
			LogUpdate: g.Log,
		}
		return json.Marshal(marshaler)
	case "publishing":
		var marshaler = struct {
			Type       string             `json:"_type"`
			Publishing *PackageCoordinate `json:"publishing,omitempty"`
		}{
			Type:       g.Type,
			Publishing: g.Publishing,
		}
		return json.Marshal(marshaler)
	case "published":
		var marshaler = struct {
			Type      string             `json:"_type"`
			Published *PackageCoordinate `json:"published,omitempty"`
		}{
			Type:      g.Type,
			Published: g.Published,
		}
		return json.Marshal(marshaler)
	case "exitStatusUpdate":
		var marshaler = struct {
			Type             string            `json:"_type"`
			ExitStatusUpdate *ExitStatusUpdate `json:"exitStatusUpdate,omitempty"`
		}{
			Type:             g.Type,
			ExitStatusUpdate: g.ExitStatusUpdate,
		}
		return json.Marshal(marshaler)
	}
}

type GeneratorUpdateVisitor interface {
	VisitInit(*InitUpdate) error
	VisitInitV2(*InitUpdateV2) error
	VisitLog(*LogUpdate) error
	VisitPublishing(*PackageCoordinate) error
	VisitPublished(*PackageCoordinate) error
	VisitExitStatusUpdate(*ExitStatusUpdate) error
}

func (g *GeneratorUpdate) Accept(visitor GeneratorUpdateVisitor) error {
	switch g.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "init":
		return visitor.VisitInit(g.Init)
	case "initV2":
		return visitor.VisitInitV2(g.InitV2)
	case "log":
		return visitor.VisitLog(g.Log)
	case "publishing":
		return visitor.VisitPublishing(g.Publishing)
	case "published":
		return visitor.VisitPublished(g.Published)
	case "exitStatusUpdate":
		return visitor.VisitExitStatusUpdate(g.ExitStatusUpdate)
	}
}

type InitUpdate struct {
	PackagesToPublish []*PackageCoordinate `json:"packagesToPublish,omitempty"`
}

type InitUpdateV2 struct {
	PublishingToRegistry *RegistryType `json:"publishingToRegistry,omitempty"`
}

type LogLevel uint

const (
	LogLevelDebug LogLevel = iota + 1
	LogLevelInfo
	LogLevelWarn
	LogLevelError
)

func (l LogLevel) String() string {
	switch l {
	default:
		return strconv.Itoa(int(l))
	case LogLevelDebug:
		return "DEBUG"
	case LogLevelInfo:
		return "INFO"
	case LogLevelWarn:
		return "WARN"
	case LogLevelError:
		return "ERROR"
	}
}

func (l LogLevel) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", l.String())), nil
}

func (l *LogLevel) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "DEBUG":
		value := LogLevelDebug
		*l = value
	case "INFO":
		value := LogLevelInfo
		*l = value
	case "WARN":
		value := LogLevelWarn
		*l = value
	case "ERROR":
		value := LogLevelError
		*l = value
	}
	return nil
}

type LogUpdate struct {
	Level   LogLevel `json:"level,omitempty"`
	Message string   `json:"message"`
}

type MavenCoordinate struct {
	Group    string `json:"group"`
	Artifact string `json:"artifact"`
	Version  string `json:"version"`
}

type NpmCoordinate struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

type PackageCoordinate struct {
	Type  string
	Npm   *NpmCoordinate
	Maven *MavenCoordinate
}

func NewPackageCoordinateFromNpm(value *NpmCoordinate) *PackageCoordinate {
	return &PackageCoordinate{Type: "npm", Npm: value}
}

func NewPackageCoordinateFromMaven(value *MavenCoordinate) *PackageCoordinate {
	return &PackageCoordinate{Type: "maven", Maven: value}
}

func (p *PackageCoordinate) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "npm":
		value := new(NpmCoordinate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Npm = value
	case "maven":
		value := new(MavenCoordinate)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Maven = value
	}
	return nil
}

func (p PackageCoordinate) MarshalJSON() ([]byte, error) {
	switch p.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "npm":
		var marshaler = struct {
			Type string `json:"_type"`
			*NpmCoordinate
		}{
			Type:          p.Type,
			NpmCoordinate: p.Npm,
		}
		return json.Marshal(marshaler)
	case "maven":
		var marshaler = struct {
			Type string `json:"_type"`
			*MavenCoordinate
		}{
			Type:            p.Type,
			MavenCoordinate: p.Maven,
		}
		return json.Marshal(marshaler)
	}
}

type PackageCoordinateVisitor interface {
	VisitNpm(*NpmCoordinate) error
	VisitMaven(*MavenCoordinate) error
}

func (p *PackageCoordinate) Accept(visitor PackageCoordinateVisitor) error {
	switch p.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", p.Type, p)
	case "npm":
		return visitor.VisitNpm(p.Npm)
	case "maven":
		return visitor.VisitMaven(p.Maven)
	}
}

type RegistryType uint

const (
	RegistryTypeNpm RegistryType = iota + 1
	RegistryTypeMaven
	RegistryTypePypi
)

func (r RegistryType) String() string {
	switch r {
	default:
		return strconv.Itoa(int(r))
	case RegistryTypeNpm:
		return "NPM"
	case RegistryTypeMaven:
		return "MAVEN"
	case RegistryTypePypi:
		return "PYPI"
	}
}

func (r RegistryType) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", r.String())), nil
}

func (r *RegistryType) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "NPM":
		value := RegistryTypeNpm
		*r = value
	case "MAVEN":
		value := RegistryTypeMaven
		*r = value
	case "PYPI":
		value := RegistryTypePypi
		*r = value
	}
	return nil
}

type SuccessfulStatusUpdate struct {
	ZipFilename *string `json:"zipFilename,omitempty"`
}

type TaskId = string
