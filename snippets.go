// Code generated by Fern. DO NOT EDIT.

package generatorexec

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/fern-api/generator-exec-go/internal"
	big "math/big"
)

var (
	csharpEndpointSnippetFieldClient = big.NewInt(1 << 0)
)

type CsharpEndpointSnippet struct {
	// A full endpoint snippet, including the client instantiation, e.g.
	//
	// using Acme;
	//
	// var acme = new AcmeClient("<YOUR_API_KEY>");
	// await acme.Admin.Update(new UpdateAdminRequest
	//
	//	{
	//	  Id = "submission-12o3uds",
	//	  SubmissionState = RunningSubmissionState.QueueingSubmission,
	//	});
	Client string `json:"client" url:"client"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CsharpEndpointSnippet) GetClient() string {
	if c == nil {
		return ""
	}
	return c.Client
}

func (c *CsharpEndpointSnippet) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CsharpEndpointSnippet) require(field *big.Int) {
	if c.explicitFields == nil {
		c.explicitFields = big.NewInt(0)
	}
	c.explicitFields.Or(c.explicitFields, field)
}

// SetClient sets the Client field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (c *CsharpEndpointSnippet) SetClient(client string) {
	c.Client = client
	c.require(csharpEndpointSnippetFieldClient)
}

func (c *CsharpEndpointSnippet) UnmarshalJSON(data []byte) error {
	type unmarshaler CsharpEndpointSnippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CsharpEndpointSnippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CsharpEndpointSnippet) MarshalJSON() ([]byte, error) {
	type embed CsharpEndpointSnippet
	var marshaler = struct {
		embed
	}{
		embed: embed(*c),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, c.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (c *CsharpEndpointSnippet) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

var (
	endpointFieldExampleIdentifier = big.NewInt(1 << 0)
	endpointFieldId                = big.NewInt(1 << 1)
	endpointFieldSnippet           = big.NewInt(1 << 2)
)

type Endpoint struct {
	// The id of the example used to create the snippet.
	ExampleIdentifier *string             `json:"example_identifier,omitempty" url:"example_identifier,omitempty"`
	Id                *EndpointIdentifier `json:"id" url:"id"`
	Snippet           *EndpointSnippet    `json:"snippet" url:"snippet"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *Endpoint) GetExampleIdentifier() *string {
	if e == nil {
		return nil
	}
	return e.ExampleIdentifier
}

func (e *Endpoint) GetId() *EndpointIdentifier {
	if e == nil {
		return nil
	}
	return e.Id
}

func (e *Endpoint) GetSnippet() *EndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Snippet
}

func (e *Endpoint) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *Endpoint) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetExampleIdentifier sets the ExampleIdentifier field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Endpoint) SetExampleIdentifier(exampleIdentifier *string) {
	e.ExampleIdentifier = exampleIdentifier
	e.require(endpointFieldExampleIdentifier)
}

// SetId sets the Id field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Endpoint) SetId(id *EndpointIdentifier) {
	e.Id = id
	e.require(endpointFieldId)
}

// SetSnippet sets the Snippet field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *Endpoint) SetSnippet(snippet *EndpointSnippet) {
	e.Snippet = snippet
	e.require(endpointFieldSnippet)
}

func (e *Endpoint) UnmarshalJSON(data []byte) error {
	type unmarshaler Endpoint
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = Endpoint(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *Endpoint) MarshalJSON() ([]byte, error) {
	type embed Endpoint
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *Endpoint) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

var (
	endpointIdentifierFieldPath               = big.NewInt(1 << 0)
	endpointIdentifierFieldMethod             = big.NewInt(1 << 1)
	endpointIdentifierFieldIdentifierOverride = big.NewInt(1 << 2)
)

type EndpointIdentifier struct {
	Path   EndpointPath   `json:"path" url:"path"`
	Method EndpointMethod `json:"method" url:"method"`
	// The ID for the endpoint as declared within the IR, this is a unique name for the endpoint, whereas path and
	// method are not (specifically for the fern definition, consider chat and chat stream). This is optional to
	// remain backcompat with old snippets of yore.
	IdentifierOverride *string `json:"identifier_override,omitempty" url:"identifier_override,omitempty"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EndpointIdentifier) GetPath() EndpointPath {
	if e == nil {
		return ""
	}
	return e.Path
}

func (e *EndpointIdentifier) GetMethod() EndpointMethod {
	if e == nil {
		return ""
	}
	return e.Method
}

func (e *EndpointIdentifier) GetIdentifierOverride() *string {
	if e == nil {
		return nil
	}
	return e.IdentifierOverride
}

func (e *EndpointIdentifier) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EndpointIdentifier) require(field *big.Int) {
	if e.explicitFields == nil {
		e.explicitFields = big.NewInt(0)
	}
	e.explicitFields.Or(e.explicitFields, field)
}

// SetPath sets the Path field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EndpointIdentifier) SetPath(path EndpointPath) {
	e.Path = path
	e.require(endpointIdentifierFieldPath)
}

// SetMethod sets the Method field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EndpointIdentifier) SetMethod(method EndpointMethod) {
	e.Method = method
	e.require(endpointIdentifierFieldMethod)
}

// SetIdentifierOverride sets the IdentifierOverride field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (e *EndpointIdentifier) SetIdentifierOverride(identifierOverride *string) {
	e.IdentifierOverride = identifierOverride
	e.require(endpointIdentifierFieldIdentifierOverride)
}

func (e *EndpointIdentifier) UnmarshalJSON(data []byte) error {
	type unmarshaler EndpointIdentifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EndpointIdentifier(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EndpointIdentifier) MarshalJSON() ([]byte, error) {
	type embed EndpointIdentifier
	var marshaler = struct {
		embed
	}{
		embed: embed(*e),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, e.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (e *EndpointIdentifier) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EndpointMethod string

const (
	EndpointMethodPut    EndpointMethod = "PUT"
	EndpointMethodPost   EndpointMethod = "POST"
	EndpointMethodGet    EndpointMethod = "GET"
	EndpointMethodPatch  EndpointMethod = "PATCH"
	EndpointMethodDelete EndpointMethod = "DELETE"
	EndpointMethodHead   EndpointMethod = "HEAD"
)

func NewEndpointMethodFromString(s string) (EndpointMethod, error) {
	switch s {
	case "PUT":
		return EndpointMethodPut, nil
	case "POST":
		return EndpointMethodPost, nil
	case "GET":
		return EndpointMethodGet, nil
	case "PATCH":
		return EndpointMethodPatch, nil
	case "DELETE":
		return EndpointMethodDelete, nil
	case "HEAD":
		return EndpointMethodHead, nil
	}
	var t EndpointMethod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EndpointMethod) Ptr() *EndpointMethod {
	return &e
}

// The relative path for an endpont (e.g. `/users/{userId}`)
type EndpointPath = string

// Defines a variety of different formats for an individual endpoint's snippet
type EndpointSnippet struct {
	Type       string
	Typescript *TypescriptEndpointSnippet
	Python     *PythonEndpointSnippet
	Java       *JavaEndpointSnippet
	Go         *GoEndpointSnippet
	Ruby       *RubyEndpointSnippet
	Csharp     *CsharpEndpointSnippet
	Rust       *RustEndpointSnippet
}

func (e *EndpointSnippet) GetType() string {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *EndpointSnippet) GetTypescript() *TypescriptEndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Typescript
}

func (e *EndpointSnippet) GetPython() *PythonEndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Python
}

func (e *EndpointSnippet) GetJava() *JavaEndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Java
}

func (e *EndpointSnippet) GetGo() *GoEndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Go
}

func (e *EndpointSnippet) GetRuby() *RubyEndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Ruby
}

func (e *EndpointSnippet) GetCsharp() *CsharpEndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Csharp
}

func (e *EndpointSnippet) GetRust() *RustEndpointSnippet {
	if e == nil {
		return nil
	}
	return e.Rust
}

func (e *EndpointSnippet) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	if unmarshaler.Type == "" {
		return fmt.Errorf("%T did not include discriminant type", e)
	}
	switch unmarshaler.Type {
	case "typescript":
		value := new(TypescriptEndpointSnippet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Typescript = value
	case "python":
		value := new(PythonEndpointSnippet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Python = value
	case "java":
		value := new(JavaEndpointSnippet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Java = value
	case "go":
		value := new(GoEndpointSnippet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Go = value
	case "ruby":
		value := new(RubyEndpointSnippet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Ruby = value
	case "csharp":
		value := new(CsharpEndpointSnippet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Csharp = value
	case "rust":
		value := new(RustEndpointSnippet)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rust = value
	}
	return nil
}

func (e EndpointSnippet) MarshalJSON() ([]byte, error) {
	if err := e.validate(); err != nil {
		return nil, err
	}
	if e.Typescript != nil {
		return internal.MarshalJSONWithExtraProperty(e.Typescript, "type", "typescript")
	}
	if e.Python != nil {
		return internal.MarshalJSONWithExtraProperty(e.Python, "type", "python")
	}
	if e.Java != nil {
		return internal.MarshalJSONWithExtraProperty(e.Java, "type", "java")
	}
	if e.Go != nil {
		return internal.MarshalJSONWithExtraProperty(e.Go, "type", "go")
	}
	if e.Ruby != nil {
		return internal.MarshalJSONWithExtraProperty(e.Ruby, "type", "ruby")
	}
	if e.Csharp != nil {
		return internal.MarshalJSONWithExtraProperty(e.Csharp, "type", "csharp")
	}
	if e.Rust != nil {
		return internal.MarshalJSONWithExtraProperty(e.Rust, "type", "rust")
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type EndpointSnippetVisitor interface {
	VisitTypescript(*TypescriptEndpointSnippet) error
	VisitPython(*PythonEndpointSnippet) error
	VisitJava(*JavaEndpointSnippet) error
	VisitGo(*GoEndpointSnippet) error
	VisitRuby(*RubyEndpointSnippet) error
	VisitCsharp(*CsharpEndpointSnippet) error
	VisitRust(*RustEndpointSnippet) error
}

func (e *EndpointSnippet) Accept(visitor EndpointSnippetVisitor) error {
	if e.Typescript != nil {
		return visitor.VisitTypescript(e.Typescript)
	}
	if e.Python != nil {
		return visitor.VisitPython(e.Python)
	}
	if e.Java != nil {
		return visitor.VisitJava(e.Java)
	}
	if e.Go != nil {
		return visitor.VisitGo(e.Go)
	}
	if e.Ruby != nil {
		return visitor.VisitRuby(e.Ruby)
	}
	if e.Csharp != nil {
		return visitor.VisitCsharp(e.Csharp)
	}
	if e.Rust != nil {
		return visitor.VisitRust(e.Rust)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

func (e *EndpointSnippet) validate() error {
	if e == nil {
		return fmt.Errorf("type %T is nil", e)
	}
	var fields []string
	if e.Typescript != nil {
		fields = append(fields, "typescript")
	}
	if e.Python != nil {
		fields = append(fields, "python")
	}
	if e.Java != nil {
		fields = append(fields, "java")
	}
	if e.Go != nil {
		fields = append(fields, "go")
	}
	if e.Ruby != nil {
		fields = append(fields, "ruby")
	}
	if e.Csharp != nil {
		fields = append(fields, "csharp")
	}
	if e.Rust != nil {
		fields = append(fields, "rust")
	}
	if len(fields) == 0 {
		if e.Type != "" {
			return fmt.Errorf("type %T defines a discriminant set to %q but the field is not set", e, e.Type)
		}
		return fmt.Errorf("type %T is empty", e)
	}
	if len(fields) > 1 {
		return fmt.Errorf("type %T defines values for %s, but only one value is allowed", e, fields)
	}
	if e.Type != "" {
		field := fields[0]
		if e.Type != field {
			return fmt.Errorf(
				"type %T defines a discriminant set to %q, but it does not match the %T field; either remove or update the discriminant to match",
				e,
				e.Type,
				e,
			)
		}
	}
	return nil
}

var (
	goEndpointSnippetFieldClient = big.NewInt(1 << 0)
)

type GoEndpointSnippet struct {
	// A full endpoint snippet, including the client instantiation, e.g.
	//
	// import (
	//
	//	"context"
	//	"fmt"
	//
	//	acme "github.com/acme/acme-go"
	//	acmeclient "github.com/acme/acme-go/client"
	//
	// )
	//
	// client := acmeclient.NewClient(
	//
	//	acmeclient.WithApiKey("..."),
	//
	// )
	// client.Admin.Update(
	//
	//	context.TODO(),
	//	"submission-12o3uds",
	//	&acme.AdminUpdateRequest{
	//	  SubmissionState: acme.RunningSubmissionStateQueuingSubmission,
	//	},
	//
	// )
	Client string `json:"client" url:"client"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GoEndpointSnippet) GetClient() string {
	if g == nil {
		return ""
	}
	return g.Client
}

func (g *GoEndpointSnippet) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GoEndpointSnippet) require(field *big.Int) {
	if g.explicitFields == nil {
		g.explicitFields = big.NewInt(0)
	}
	g.explicitFields.Or(g.explicitFields, field)
}

// SetClient sets the Client field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (g *GoEndpointSnippet) SetClient(client string) {
	g.Client = client
	g.require(goEndpointSnippetFieldClient)
}

func (g *GoEndpointSnippet) UnmarshalJSON(data []byte) error {
	type unmarshaler GoEndpointSnippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GoEndpointSnippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoEndpointSnippet) MarshalJSON() ([]byte, error) {
	type embed GoEndpointSnippet
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, g.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (g *GoEndpointSnippet) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

var (
	javaEndpointSnippetFieldSyncClient  = big.NewInt(1 << 0)
	javaEndpointSnippetFieldAsyncClient = big.NewInt(1 << 1)
)

type JavaEndpointSnippet struct {
	// A full endpoint snippet, including the sync client instantiation, e.g.
	//
	// import com.acme.AcmeApiClient;
	// import com.acme.resources.types.RunningSubmissionState;
	//
	// AcmeClient acmeClient = AcmeClient.builder()
	//
	//	.apiKey("...")
	//	.build();
	//
	// acmeClient.admin().create(
	//
	//	"submission-12o3uds",
	//	AdminUpdateRequest.builder()
	//	  .submissionState(RunningSubmissionState.QUEUEING_SUBMISSION)
	//	  .build());
	SyncClient string `json:"sync_client" url:"sync_client"`
	// A full endpoint snippet, including the async client instantiation, e.g.
	//
	// import com.acme.AcmeApiClient;
	// import com.acme.resources.types.RunningSubmissionState;
	//
	// AcmeClient acmeClient = AcmeClient.builder()
	//
	//	.apiKey("API_KEY")
	//	.build();
	//
	// acmeClient.admin().create(
	//
	//	"submission-12o3uds",
	//	AdminUpdateRequest.builder()
	//	  .submissionState(RunningSubmissionState.QUEUEING_SUBMISSION)
	//	  .build());
	AsyncClient string `json:"async_client" url:"async_client"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (j *JavaEndpointSnippet) GetSyncClient() string {
	if j == nil {
		return ""
	}
	return j.SyncClient
}

func (j *JavaEndpointSnippet) GetAsyncClient() string {
	if j == nil {
		return ""
	}
	return j.AsyncClient
}

func (j *JavaEndpointSnippet) GetExtraProperties() map[string]interface{} {
	return j.extraProperties
}

func (j *JavaEndpointSnippet) require(field *big.Int) {
	if j.explicitFields == nil {
		j.explicitFields = big.NewInt(0)
	}
	j.explicitFields.Or(j.explicitFields, field)
}

// SetSyncClient sets the SyncClient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JavaEndpointSnippet) SetSyncClient(syncClient string) {
	j.SyncClient = syncClient
	j.require(javaEndpointSnippetFieldSyncClient)
}

// SetAsyncClient sets the AsyncClient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (j *JavaEndpointSnippet) SetAsyncClient(asyncClient string) {
	j.AsyncClient = asyncClient
	j.require(javaEndpointSnippetFieldAsyncClient)
}

func (j *JavaEndpointSnippet) UnmarshalJSON(data []byte) error {
	type unmarshaler JavaEndpointSnippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JavaEndpointSnippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *j)
	if err != nil {
		return err
	}
	j.extraProperties = extraProperties
	j.rawJSON = json.RawMessage(data)
	return nil
}

func (j *JavaEndpointSnippet) MarshalJSON() ([]byte, error) {
	type embed JavaEndpointSnippet
	var marshaler = struct {
		embed
	}{
		embed: embed(*j),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, j.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (j *JavaEndpointSnippet) String() string {
	if len(j.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(j.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

var (
	pythonEndpointSnippetFieldSyncClient  = big.NewInt(1 << 0)
	pythonEndpointSnippetFieldAsyncClient = big.NewInt(1 << 1)
)

type PythonEndpointSnippet struct {
	// A full endpoint snippet, including the sync client instantiation, e.g.
	//
	// from acme import RunningSubmissionState
	// from acme.client import Acme
	//
	// client = Acme(api_key="...")
	// client.admin.update(
	//
	//	submission_id="submission-12o3uds",
	//	request=RunningSubmissionState.QUEUEING_SUBMISSION,
	//
	// )
	SyncClient string `json:"sync_client" url:"sync_client"`
	// A full endpoint snippet, including the async client instantiation, e.g.
	//
	// from acme import RunningSubmissionState
	// from acme.client import AsyncAcme
	//
	// client = AsyncAcme(api_key="...")
	// await client.admin.update(
	//
	//	submission_id="submission-12o3uds",
	//	request=RunningSubmissionState.QUEUEING_SUBMISSION,
	//
	// )
	AsyncClient string `json:"async_client" url:"async_client"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PythonEndpointSnippet) GetSyncClient() string {
	if p == nil {
		return ""
	}
	return p.SyncClient
}

func (p *PythonEndpointSnippet) GetAsyncClient() string {
	if p == nil {
		return ""
	}
	return p.AsyncClient
}

func (p *PythonEndpointSnippet) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PythonEndpointSnippet) require(field *big.Int) {
	if p.explicitFields == nil {
		p.explicitFields = big.NewInt(0)
	}
	p.explicitFields.Or(p.explicitFields, field)
}

// SetSyncClient sets the SyncClient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PythonEndpointSnippet) SetSyncClient(syncClient string) {
	p.SyncClient = syncClient
	p.require(pythonEndpointSnippetFieldSyncClient)
}

// SetAsyncClient sets the AsyncClient field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (p *PythonEndpointSnippet) SetAsyncClient(asyncClient string) {
	p.AsyncClient = asyncClient
	p.require(pythonEndpointSnippetFieldAsyncClient)
}

func (p *PythonEndpointSnippet) UnmarshalJSON(data []byte) error {
	type unmarshaler PythonEndpointSnippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PythonEndpointSnippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PythonEndpointSnippet) MarshalJSON() ([]byte, error) {
	type embed PythonEndpointSnippet
	var marshaler = struct {
		embed
	}{
		embed: embed(*p),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, p.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (p *PythonEndpointSnippet) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

var (
	rubyEndpointSnippetFieldClient = big.NewInt(1 << 0)
)

type RubyEndpointSnippet struct {
	// A full endpoint snippet, including the client instantiation, e.g.
	//
	// require "acme"
	//
	// acme = Acme::Client.new(
	//
	//	apiKey: 'YOUR_API_KEY'
	//
	// )
	// acme.admin.update(
	//
	//	submission_id: "submission-12o3uds",
	//	request: Acme::RunningSubmissionState::QUEUEING_SUBMISSION
	//
	// )
	Client string `json:"client" url:"client"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RubyEndpointSnippet) GetClient() string {
	if r == nil {
		return ""
	}
	return r.Client
}

func (r *RubyEndpointSnippet) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RubyEndpointSnippet) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetClient sets the Client field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RubyEndpointSnippet) SetClient(client string) {
	r.Client = client
	r.require(rubyEndpointSnippetFieldClient)
}

func (r *RubyEndpointSnippet) UnmarshalJSON(data []byte) error {
	type unmarshaler RubyEndpointSnippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RubyEndpointSnippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RubyEndpointSnippet) MarshalJSON() ([]byte, error) {
	type embed RubyEndpointSnippet
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RubyEndpointSnippet) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

var (
	rustEndpointSnippetFieldClient = big.NewInt(1 << 0)
)

type RustEndpointSnippet struct {
	// A full endpoint snippet, including the client instantiation, e.g.
	//
	// use acme::{AcmeClient, RunningSubmissionState};
	//
	// let client = AcmeClient::new("YOUR_API_KEY");
	// client.admin().update(
	//
	//	"submission-12o3uds",
	//	RunningSubmissionState::QueueingSubmission,
	//
	// ).await?;
	Client string `json:"client" url:"client"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RustEndpointSnippet) GetClient() string {
	if r == nil {
		return ""
	}
	return r.Client
}

func (r *RustEndpointSnippet) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RustEndpointSnippet) require(field *big.Int) {
	if r.explicitFields == nil {
		r.explicitFields = big.NewInt(0)
	}
	r.explicitFields.Or(r.explicitFields, field)
}

// SetClient sets the Client field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (r *RustEndpointSnippet) SetClient(client string) {
	r.Client = client
	r.require(rustEndpointSnippetFieldClient)
}

func (r *RustEndpointSnippet) UnmarshalJSON(data []byte) error {
	type unmarshaler RustEndpointSnippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RustEndpointSnippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RustEndpointSnippet) MarshalJSON() ([]byte, error) {
	type embed RustEndpointSnippet
	var marshaler = struct {
		embed
	}{
		embed: embed(*r),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, r.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (r *RustEndpointSnippet) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The code snippets defined in the API
var (
	snippetsFieldTypes     = big.NewInt(1 << 0)
	snippetsFieldEndpoints = big.NewInt(1 << 1)
)

type Snippets struct {
	// The type snippets defined by by the API
	Types map[TypeId]string `json:"types" url:"types"`
	// The endpoint snippets defined by the API
	Endpoints []*Endpoint `json:"endpoints" url:"endpoints"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Snippets) GetTypes() map[TypeId]string {
	if s == nil {
		return nil
	}
	return s.Types
}

func (s *Snippets) GetEndpoints() []*Endpoint {
	if s == nil {
		return nil
	}
	return s.Endpoints
}

func (s *Snippets) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Snippets) require(field *big.Int) {
	if s.explicitFields == nil {
		s.explicitFields = big.NewInt(0)
	}
	s.explicitFields.Or(s.explicitFields, field)
}

// SetTypes sets the Types field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *Snippets) SetTypes(types map[TypeId]string) {
	s.Types = types
	s.require(snippetsFieldTypes)
}

// SetEndpoints sets the Endpoints field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (s *Snippets) SetEndpoints(endpoints []*Endpoint) {
	s.Endpoints = endpoints
	s.require(snippetsFieldEndpoints)
}

func (s *Snippets) UnmarshalJSON(data []byte) error {
	type unmarshaler Snippets
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Snippets(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Snippets) MarshalJSON() ([]byte, error) {
	type embed Snippets
	var marshaler = struct {
		embed
	}{
		embed: embed(*s),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, s.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (s *Snippets) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TypeId = string

var (
	typescriptEndpointSnippetFieldClient = big.NewInt(1 << 0)
)

type TypescriptEndpointSnippet struct {
	// A full endpoint snippet, including the client instantiation, e.g.
	//
	// import { AcmeClient, Acme } from '@acme/acme-node-client';
	//
	//	const acme = new AcmeClient({
	//	  apiKey: 'YOUR_API_KEY',
	//	});
	//
	//	await acme.admin.update({
	//	    submission_id: "submission-12o3uds",
	//	    request: Acme.RunningSubmissionState.QUEUEING_SUBMISSION,
	//	});
	Client string `json:"client" url:"client"`

	// Private bitmask of fields set to an explicit value and therefore not to be omitted
	explicitFields *big.Int `json:"-" url:"-"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TypescriptEndpointSnippet) GetClient() string {
	if t == nil {
		return ""
	}
	return t.Client
}

func (t *TypescriptEndpointSnippet) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TypescriptEndpointSnippet) require(field *big.Int) {
	if t.explicitFields == nil {
		t.explicitFields = big.NewInt(0)
	}
	t.explicitFields.Or(t.explicitFields, field)
}

// SetClient sets the Client field and marks it as non-optional;
// this prevents an empty or null value for this field from being omitted during serialization.
func (t *TypescriptEndpointSnippet) SetClient(client string) {
	t.Client = client
	t.require(typescriptEndpointSnippetFieldClient)
}

func (t *TypescriptEndpointSnippet) UnmarshalJSON(data []byte) error {
	type unmarshaler TypescriptEndpointSnippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TypescriptEndpointSnippet(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TypescriptEndpointSnippet) MarshalJSON() ([]byte, error) {
	type embed TypescriptEndpointSnippet
	var marshaler = struct {
		embed
	}{
		embed: embed(*t),
	}
	explicitMarshaler := internal.HandleExplicitFields(marshaler, t.explicitFields)
	return json.Marshal(explicitMarshaler)
}

func (t *TypescriptEndpointSnippet) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
