// This file was auto-generated by Fern from our API Definition.

package generatorexec

import (
	json "encoding/json"
	fmt "fmt"
)

type EnvironmentVariable = string

type GeneratorConfig struct {
	DryRun     bool                   `json:"dryRun"`
	IrFilepath string                 `json:"irFilepath"`
	Output     *GeneratorOutputConfig `json:"output,omitempty"`
	// Deprecated. Use output.mode instead.
	Publish       *GeneratorPublishConfig `json:"publish,omitempty"`
	WorkspaceName string                  `json:"workspaceName"`
	Organization  string                  `json:"organization"`
	CustomConfig  any                     `json:"customConfig,omitempty"`
	Environment   *GeneratorEnvironment   `json:"environment,omitempty"`
}

type GeneratorEnvironment struct {
	Type   string
	Local  any
	Remote *RemoteGeneratorEnvironment
}

func NewGeneratorEnvironmentFromLocal(value any) *GeneratorEnvironment {
	return &GeneratorEnvironment{Type: "local", Local: value}
}

func NewGeneratorEnvironmentFromRemote(value *RemoteGeneratorEnvironment) *GeneratorEnvironment {
	return &GeneratorEnvironment{Type: "remote", Remote: value}
}

func (g *GeneratorEnvironment) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	g.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "local":
		value := make(map[string]any)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Local = value
	case "remote":
		value := new(RemoteGeneratorEnvironment)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Remote = value
	}
	return nil
}

func (g GeneratorEnvironment) MarshalJSON() ([]byte, error) {
	switch g.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "local":
		var marshaler = struct {
			Type  string `json:"_type"`
			Local any    `json:"local,omitempty"`
		}{
			Type:  g.Type,
			Local: g.Local,
		}
		return json.Marshal(marshaler)
	case "remote":
		var marshaler = struct {
			Type string `json:"_type"`
			*RemoteGeneratorEnvironment
		}{
			Type:                       g.Type,
			RemoteGeneratorEnvironment: g.Remote,
		}
		return json.Marshal(marshaler)
	}
}

type GeneratorEnvironmentVisitor interface {
	VisitLocal(any) error
	VisitRemote(*RemoteGeneratorEnvironment) error
}

func (g *GeneratorEnvironment) Accept(visitor GeneratorEnvironmentVisitor) error {
	switch g.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "local":
		return visitor.VisitLocal(g.Local)
	case "remote":
		return visitor.VisitRemote(g.Remote)
	}
}

type GeneratorOutputConfig struct {
	Path string      `json:"path"`
	Mode *OutputMode `json:"mode,omitempty"`
}

type GeneratorPublishConfig struct {
	// Deprecated, use publishTargets instead.
	Registries *GeneratorRegistriesConfig `json:"registries,omitempty"`
	// Deprecated, use publishTargets instead.
	RegistriesV2  *GeneratorRegistriesConfigV2 `json:"registriesV2,omitempty"`
	PublishTarget *GeneratorPublishTarget      `json:"publishTarget,omitempty"`
	Version       string                       `json:"version"`
}

type GeneratorPublishTarget struct {
	Type    string
	Maven   *MavenRegistryConfigV2
	Npm     *NpmRegistryConfigV2
	Pypi    *PypiRegistryConfig
	Postman *PostmanConfig
}

func NewGeneratorPublishTargetFromMaven(value *MavenRegistryConfigV2) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "maven", Maven: value}
}

func NewGeneratorPublishTargetFromNpm(value *NpmRegistryConfigV2) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "npm", Npm: value}
}

func NewGeneratorPublishTargetFromPypi(value *PypiRegistryConfig) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "pypi", Pypi: value}
}

func NewGeneratorPublishTargetFromPostman(value *PostmanConfig) *GeneratorPublishTarget {
	return &GeneratorPublishTarget{Type: "postman", Postman: value}
}

func (g *GeneratorPublishTarget) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	g.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "maven":
		value := new(MavenRegistryConfigV2)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Maven = value
	case "npm":
		value := new(NpmRegistryConfigV2)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Npm = value
	case "pypi":
		value := new(PypiRegistryConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Pypi = value
	case "postman":
		value := new(PostmanConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Postman = value
	}
	return nil
}

func (g GeneratorPublishTarget) MarshalJSON() ([]byte, error) {
	switch g.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "maven":
		var marshaler = struct {
			Type string `json:"type"`
			*MavenRegistryConfigV2
		}{
			Type:                  g.Type,
			MavenRegistryConfigV2: g.Maven,
		}
		return json.Marshal(marshaler)
	case "npm":
		var marshaler = struct {
			Type string `json:"type"`
			*NpmRegistryConfigV2
		}{
			Type:                g.Type,
			NpmRegistryConfigV2: g.Npm,
		}
		return json.Marshal(marshaler)
	case "pypi":
		var marshaler = struct {
			Type string `json:"type"`
			*PypiRegistryConfig
		}{
			Type:               g.Type,
			PypiRegistryConfig: g.Pypi,
		}
		return json.Marshal(marshaler)
	case "postman":
		var marshaler = struct {
			Type string `json:"type"`
			*PostmanConfig
		}{
			Type:          g.Type,
			PostmanConfig: g.Postman,
		}
		return json.Marshal(marshaler)
	}
}

type GeneratorPublishTargetVisitor interface {
	VisitMaven(*MavenRegistryConfigV2) error
	VisitNpm(*NpmRegistryConfigV2) error
	VisitPypi(*PypiRegistryConfig) error
	VisitPostman(*PostmanConfig) error
}

func (g *GeneratorPublishTarget) Accept(visitor GeneratorPublishTargetVisitor) error {
	switch g.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "maven":
		return visitor.VisitMaven(g.Maven)
	case "npm":
		return visitor.VisitNpm(g.Npm)
	case "pypi":
		return visitor.VisitPypi(g.Pypi)
	case "postman":
		return visitor.VisitPostman(g.Postman)
	}
}

type GeneratorRegistriesConfig struct {
	Maven *MavenRegistryConfig `json:"maven,omitempty"`
	Npm   *NpmRegistryConfig   `json:"npm,omitempty"`
}

type GeneratorRegistriesConfigV2 struct {
	Maven *MavenRegistryConfigV2 `json:"maven,omitempty"`
	Npm   *NpmRegistryConfigV2   `json:"npm,omitempty"`
	Pypi  *PypiRegistryConfig    `json:"pypi,omitempty"`
}

type GithubOutputMode struct {
	Version string `json:"version"`
	// A full repo url (i.e. https://github.com/fern-api/fern)
	RepoUrl     string             `json:"repoUrl"`
	PublishInfo *GithubPublishInfo `json:"publishInfo,omitempty"`
}

type GithubPublishInfo struct {
	Type    string
	Npm     *NpmGithubPublishInfo
	Maven   *MavenGithubPublishInfo
	Postman *PostmanGithubPublishInfo
	Pypi    *PypiGithubPublishInfo
}

func NewGithubPublishInfoFromNpm(value *NpmGithubPublishInfo) *GithubPublishInfo {
	return &GithubPublishInfo{Type: "npm", Npm: value}
}

func NewGithubPublishInfoFromMaven(value *MavenGithubPublishInfo) *GithubPublishInfo {
	return &GithubPublishInfo{Type: "maven", Maven: value}
}

func NewGithubPublishInfoFromPostman(value *PostmanGithubPublishInfo) *GithubPublishInfo {
	return &GithubPublishInfo{Type: "postman", Postman: value}
}

func NewGithubPublishInfoFromPypi(value *PypiGithubPublishInfo) *GithubPublishInfo {
	return &GithubPublishInfo{Type: "pypi", Pypi: value}
}

func (g *GithubPublishInfo) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	g.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "npm":
		value := new(NpmGithubPublishInfo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Npm = value
	case "maven":
		value := new(MavenGithubPublishInfo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Maven = value
	case "postman":
		value := new(PostmanGithubPublishInfo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Postman = value
	case "pypi":
		value := new(PypiGithubPublishInfo)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		g.Pypi = value
	}
	return nil
}

func (g GithubPublishInfo) MarshalJSON() ([]byte, error) {
	switch g.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "npm":
		var marshaler = struct {
			Type string `json:"type"`
			*NpmGithubPublishInfo
		}{
			Type:                 g.Type,
			NpmGithubPublishInfo: g.Npm,
		}
		return json.Marshal(marshaler)
	case "maven":
		var marshaler = struct {
			Type string `json:"type"`
			*MavenGithubPublishInfo
		}{
			Type:                   g.Type,
			MavenGithubPublishInfo: g.Maven,
		}
		return json.Marshal(marshaler)
	case "postman":
		var marshaler = struct {
			Type string `json:"type"`
			*PostmanGithubPublishInfo
		}{
			Type:                     g.Type,
			PostmanGithubPublishInfo: g.Postman,
		}
		return json.Marshal(marshaler)
	case "pypi":
		var marshaler = struct {
			Type string `json:"type"`
			*PypiGithubPublishInfo
		}{
			Type:                  g.Type,
			PypiGithubPublishInfo: g.Pypi,
		}
		return json.Marshal(marshaler)
	}
}

type GithubPublishInfoVisitor interface {
	VisitNpm(*NpmGithubPublishInfo) error
	VisitMaven(*MavenGithubPublishInfo) error
	VisitPostman(*PostmanGithubPublishInfo) error
	VisitPypi(*PypiGithubPublishInfo) error
}

func (g *GithubPublishInfo) Accept(visitor GithubPublishInfoVisitor) error {
	switch g.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", g.Type, g)
	case "npm":
		return visitor.VisitNpm(g.Npm)
	case "maven":
		return visitor.VisitMaven(g.Maven)
	case "postman":
		return visitor.VisitPostman(g.Postman)
	case "pypi":
		return visitor.VisitPypi(g.Pypi)
	}
}

type MavenGithubPublishInfo struct {
	RegistryUrl                 string              `json:"registryUrl"`
	Coordinate                  string              `json:"coordinate"`
	UsernameEnvironmentVariable EnvironmentVariable `json:"usernameEnvironmentVariable"`
	PasswordEnvironmentVariable EnvironmentVariable `json:"passwordEnvironmentVariable"`
}

type MavenRegistryConfig struct {
	RegistryUrl string `json:"registryUrl"`
	Username    string `json:"username"`
	Password    string `json:"password"`
	Group       string `json:"group"`
}

type MavenRegistryConfigV2 struct {
	RegistryUrl string `json:"registryUrl"`
	Username    string `json:"username"`
	Password    string `json:"password"`
	Coordinate  string `json:"coordinate"`
}

type NpmGithubPublishInfo struct {
	RegistryUrl              string              `json:"registryUrl"`
	PackageName              string              `json:"packageName"`
	TokenEnvironmentVariable EnvironmentVariable `json:"tokenEnvironmentVariable"`
}

type NpmRegistryConfig struct {
	RegistryUrl string `json:"registryUrl"`
	Token       string `json:"token"`
	Scope       string `json:"scope"`
}

type NpmRegistryConfigV2 struct {
	RegistryUrl string `json:"registryUrl"`
	Token       string `json:"token"`
	PackageName string `json:"packageName"`
}

type OutputMode struct {
	Type          string
	Publish       *GeneratorPublishConfig
	DownloadFiles any
	Github        *GithubOutputMode
}

func NewOutputModeFromPublish(value *GeneratorPublishConfig) *OutputMode {
	return &OutputMode{Type: "publish", Publish: value}
}

func NewOutputModeFromDownloadFiles(value any) *OutputMode {
	return &OutputMode{Type: "downloadFiles", DownloadFiles: value}
}

func NewOutputModeFromGithub(value *GithubOutputMode) *OutputMode {
	return &OutputMode{Type: "github", Github: value}
}

func (o *OutputMode) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	o.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "publish":
		value := new(GeneratorPublishConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Publish = value
	case "downloadFiles":
		value := make(map[string]any)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.DownloadFiles = value
	case "github":
		value := new(GithubOutputMode)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Github = value
	}
	return nil
}

func (o OutputMode) MarshalJSON() ([]byte, error) {
	switch o.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.Type, o)
	case "publish":
		var marshaler = struct {
			Type string `json:"type"`
			*GeneratorPublishConfig
		}{
			Type:                   o.Type,
			GeneratorPublishConfig: o.Publish,
		}
		return json.Marshal(marshaler)
	case "downloadFiles":
		var marshaler = struct {
			Type          string `json:"type"`
			DownloadFiles any    `json:"downloadFiles,omitempty"`
		}{
			Type:          o.Type,
			DownloadFiles: o.DownloadFiles,
		}
		return json.Marshal(marshaler)
	case "github":
		var marshaler = struct {
			Type string `json:"type"`
			*GithubOutputMode
		}{
			Type:             o.Type,
			GithubOutputMode: o.Github,
		}
		return json.Marshal(marshaler)
	}
}

type OutputModeVisitor interface {
	VisitPublish(*GeneratorPublishConfig) error
	VisitDownloadFiles(any) error
	VisitGithub(*GithubOutputMode) error
}

func (o *OutputMode) Accept(visitor OutputModeVisitor) error {
	switch o.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", o.Type, o)
	case "publish":
		return visitor.VisitPublish(o.Publish)
	case "downloadFiles":
		return visitor.VisitDownloadFiles(o.DownloadFiles)
	case "github":
		return visitor.VisitGithub(o.Github)
	}
}

type PostmanConfig struct {
	ApiKey      string `json:"apiKey"`
	WorkspaceId string `json:"workspaceId"`
}

type PostmanGithubPublishInfo struct {
	ApiKeyEnvironmentVariable      EnvironmentVariable `json:"apiKeyEnvironmentVariable"`
	WorkspaceIdEnvironmentVariable EnvironmentVariable `json:"workspaceIdEnvironmentVariable"`
}

type PypiGithubPublishInfo struct {
	RegistryUrl                 string              `json:"registryUrl"`
	PackageName                 string              `json:"packageName"`
	UsernameEnvironmentVariable EnvironmentVariable `json:"usernameEnvironmentVariable"`
	PasswordEnvironmentVariable EnvironmentVariable `json:"passwordEnvironmentVariable"`
}

type PypiRegistryConfig struct {
	RegistryUrl string `json:"registryUrl"`
	Username    string `json:"username"`
	Password    string `json:"password"`
	PackageName string `json:"packageName"`
}

type RemoteGeneratorEnvironment struct {
	CoordinatorUrl   string `json:"coordinatorUrl"`
	CoordinatorUrlV2 string `json:"coordinatorUrlV2"`
	Id               TaskId `json:"id"`
}
